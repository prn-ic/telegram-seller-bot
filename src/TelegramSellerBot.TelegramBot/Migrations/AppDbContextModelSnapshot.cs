// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TelegramSellerBot.Persistense.Data;

#nullable disable

namespace TelegramSellerBot.TelegramBot.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TelegramSellerBot.Core.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DurationId")
                        .HasColumnType("integer")
                        .HasColumnName("duration_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<string>("TelegramUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telegram_user_id");

                    b.HasKey("Id")
                        .HasName("pk_subscriptions");

                    b.HasIndex("DurationId")
                        .HasDatabaseName("ix_subscriptions_duration_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_subscriptions_service_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_subscriptions_status_id");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("TelegramSellerBot.Core.Entities.SubscriptionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<Guid?>("TelegramBotId")
                        .HasColumnType("uuid")
                        .HasColumnName("telegram_bot_id");

                    b.HasKey("Id")
                        .HasName("pk_subscription_histories");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_subscription_histories_status_id");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("ix_subscription_histories_subscription_id");

                    b.HasIndex("TelegramBotId")
                        .HasDatabaseName("ix_subscription_histories_telegram_bot_id");

                    b.ToTable("subscription_histories", (string)null);
                });

            modelBuilder.Entity("TelegramSellerBot.Core.Entities.SubscriptionStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_subscription_statuses");

                    b.ToTable("subscription_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "inactive"
                        },
                        new
                        {
                            Id = 1,
                            Name = "active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "stoppedbyend"
                        });
                });

            modelBuilder.Entity("TelegramSellerBot.Core.Entities.TelegramBot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("TelegramBotLink")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telegram_bot_link");

                    b.HasKey("Id")
                        .HasName("pk_telegram_bots");

                    b.ToTable("telegram_bots", (string)null);
                });

            modelBuilder.Entity("TelegramSellerBot.Core.Entities.TelegramBotDuration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_telegram_bot_durations");

                    b.ToTable("telegram_bot_durations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 168,
                            Name = "week"
                        },
                        new
                        {
                            Id = 336,
                            Name = "twoweek"
                        },
                        new
                        {
                            Id = 744,
                            Name = "month"
                        },
                        new
                        {
                            Id = 2232,
                            Name = "threemonth"
                        },
                        new
                        {
                            Id = 4464,
                            Name = "halfyear"
                        },
                        new
                        {
                            Id = 8760,
                            Name = "year"
                        });
                });

            modelBuilder.Entity("TelegramSellerBot.Core.Entities.TelegramBotDurationAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<int>("DurationId")
                        .HasColumnType("integer")
                        .HasColumnName("duration_id");

                    b.Property<Guid?>("TelegramBotId")
                        .HasColumnType("uuid")
                        .HasColumnName("telegram_bot_id");

                    b.HasKey("Id")
                        .HasName("pk_telegram_bot_duration_availabilities");

                    b.HasIndex("DurationId")
                        .HasDatabaseName("ix_telegram_bot_duration_availabilities_duration_id");

                    b.HasIndex("TelegramBotId")
                        .HasDatabaseName("ix_telegram_bot_duration_availabilities_telegram_bot_id");

                    b.ToTable("telegram_bot_duration_availabilities", (string)null);
                });

            modelBuilder.Entity("TelegramSellerBot.Core.Entities.Subscription", b =>
                {
                    b.HasOne("TelegramSellerBot.Core.Entities.TelegramBotDuration", "Duration")
                        .WithMany()
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscriptions_telegram_bot_durations_duration_id");

                    b.HasOne("TelegramSellerBot.Core.Entities.TelegramBot", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_subscriptions_telegram_bots_service_id");

                    b.HasOne("TelegramSellerBot.Core.Entities.SubscriptionStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscriptions_subscription_statuses_status_id");

                    b.Navigation("Duration");

                    b.Navigation("Service");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TelegramSellerBot.Core.Entities.SubscriptionHistory", b =>
                {
                    b.HasOne("TelegramSellerBot.Core.Entities.SubscriptionStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_histories_subscription_statuses_status_id");

                    b.HasOne("TelegramSellerBot.Core.Entities.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_subscription_histories_subscriptions_subscription_id");

                    b.HasOne("TelegramSellerBot.Core.Entities.TelegramBot", "TelegramBot")
                        .WithMany()
                        .HasForeignKey("TelegramBotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_subscription_histories_telegram_bots_telegram_bot_id");

                    b.Navigation("Status");

                    b.Navigation("Subscription");

                    b.Navigation("TelegramBot");
                });

            modelBuilder.Entity("TelegramSellerBot.Core.Entities.TelegramBotDurationAvailability", b =>
                {
                    b.HasOne("TelegramSellerBot.Core.Entities.TelegramBotDuration", "Duration")
                        .WithMany()
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_telegram_bot_duration_availabilities_telegram_bot_durations");

                    b.HasOne("TelegramSellerBot.Core.Entities.TelegramBot", "TelegramBot")
                        .WithMany("Availabilities")
                        .HasForeignKey("TelegramBotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_telegram_bot_duration_availabilities_telegram_bots_telegram");

                    b.Navigation("Duration");

                    b.Navigation("TelegramBot");
                });

            modelBuilder.Entity("TelegramSellerBot.Core.Entities.TelegramBot", b =>
                {
                    b.Navigation("Availabilities");
                });
#pragma warning restore 612, 618
        }
    }
}
